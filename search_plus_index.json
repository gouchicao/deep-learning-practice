{"./":{"url":"./","title":"深度学习实践","keywords":"","body":"深度学习实践 总结基于深度学习的实践指南 部署模型 REST服务 gRPC服务 Linux 基础知识 内网安装深度学习环境 Docker 基础知识 Dockerfile 实践经验 By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_deploy-model/rest-service.html":{"url":"chapter_deploy-model/rest-service.html","title":"REST服务","keywords":"","body":"REST服务 基于Python语言的开发 安装依赖包 pip install flask pip install flask_restful 上传图片 import tempfile import werkzeug from flask import Flask from flask_restful import reqparse, abort, Api, Resource class UploadImage(Resource): def post(self): parse = reqparse.RequestParser() parse.add_argument('file', type=werkzeug.datastructures.FileStorage, location='files') args = parse.parse_args() img_file = args['file'] if not img_file: return {'no file'}, 417 with tempfile.NamedTemporaryFile() as f: img_data = args['file'].read() f.write(img_data) return detect_result, 201 \bif __name__ == '__main__': app = Flask(__name__) api = Api(app) api.add_resource(UploadImage, '/upload_image') app.run(host=0.0.0.0, debug=False) curl测试 curl -v -X POST -H \"Content-Type: multipart/form-data\" -F \"file=@test.jpg\" http://127.0.0.1:5000/upload_image 参考资料 flask-restful Flask-RESTful User’s Guide 使用 Python 和 Flask 设计 RESTful API 使用 Flask-RESTful 设计 RESTful API 使用 Flask 设计 RESTful 的认证 Flask-RESTful快速入门 使用 Flask-RESTful 设计 RESTful API flask報錯No module named 'flask.ext' Flask-RESTful Upload Image Question on File Upload in Restful Flask By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_deploy-model/grpc-service.html":{"url":"chapter_deploy-model/grpc-service.html","title":"gRPC服务","keywords":"","body":"gRPC服务 基于Python语言的开发 安装gRPC和protoc等 $ sudo python3 -m pip install grpcio $ sudo python3 -m pip install grpcio-tools 使用protocol buffer定义接口 object_detection.proto syntax = \"proto3\"; //darknet yolov3 object detection service ObjectDetection { //客户端到服务器端的流式RPC //对图像的数据进行对象检测 rpc detect (stream UploadImageRequest) returns (DetectResponse) {} } //上传图像数据块 message UploadImageRequest { bytes data_block = 1; } //返回对象检测结果 message DetectResponse { repeated Object object = 1; } //对象的边框 message Rectangle { int32 x = 1; int32 y = 2; int32 w = 3; int32 h = 4; } //检测出的对象 message Object { string name = 1; float confidence = 2; Rectangle rectangle = 3; } gRPC默认最大消息被设置为4MB。所以这里使用了客户端到服务器端的流式RPC方式对上传的图像进行传输。 生成gRPC代码 $ python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. object_detection.proto 参考资料 Python Quick Start By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_linux/basic-knowledge.html":{"url":"chapter_linux/basic-knowledge.html","title":"基础知识","keywords":"","body":"Linux 基础知识 用户管理 添加用户 不指定组将创建和用户名一样的组 $ useradd username 创建用户指定组 $ useradd username -g root 修改密码 非root用户只能给自己修改密码$ passwd 文件管理 文件 创建文件 $ touch filename 删除文件 $ rm -f filename 递归删除文件 使用格式$ find directory -name expression -type f | xargs rm -f 递归删除当前目录下所有.DS_Store文件$ find . -name \".DS_Store\" -type f | xargs rm -f $ find . -name \".DS_Store\" -type f -delete 搜索文件 $ find directory -name expression 列出nano开头文件路径$ find / -name nano* 文件软链接 $ ln -s /usr/bin/python3.6 /usr/bin/python 列出文件信息 $ ls $ ll 目录 创建目录 $ mkdir directory 删除目录 $ rm -rf directory 递归删除目录 使用格式$ find directory -name expression -type d | xargs rm -rf 递归删除当前目录下所有images目录$ find ./ -name 'images' -type d | xargs rm -rf 切换目录 切换到当前用户目录 $ cd $ cd ~ 切换到之前的目录 $ cd - 文件内容 搜索内容 搜索一个文件$ grep 'text' hello.txt 搜索多个文件$ grep 'text' hello.txt hi.txt 搜索当前目录下所有文件$ grep 'text' * 搜索当前目录（包含子目录）下所有文件$ grep -r 'text' * 忽略字母大小写$ grep -i 'text' hello.txt 显示当前目录下的目录$ ll | grep '^d' 显示当前目录下的文件$ ll | grep '^-' 显示当前目录下的所有目录及子目录$ ll -R | grep '^d' 显示当前目录和子目录下的所有文件$ ll -R | grep '^-' 输出到标准输出窗口 $ cat /etc/profile 分页显示 $ cat /etc/profile | more 用户和组 修改文件所属用户和组 修改文件所属用户 $ chown wjj test.txt 修改文件所属组 $ chown :wjj test.txt 修改文件所属用户和组 $ chown wjj:wjj test.txt 修改文件所属组 $ chgrp wjj test.txt 软件管理 软件包管理器 配置源 $ nano /etc/apt/sources.list 更新软件列表 $ apt-get update 搜索软件 $ apt-cache search vim 安装软件 $ apt-get install vim 删除软件 $ apt-get purge vim 更新软件 $ apt-get upgrade 软件包安装 下载 $ apt-get install -d nano 安装 $ dpkg -i nano_2.9.3-2_amd64.deb 查找安装的软件 $ dpkg -l | grep nano 删除 $ dpkg -r nano 显示安装的软件 $ dpkg -l tar 打包 打包（不压缩）$ tar -cvf filename.tar filename 创建压缩包$ tar -zcvf filename.tar filename 解包 解包（不压缩）$ tar -xvf filename.tar 解压缩包$ tar -zxvf filename.tar 列出包的所有内容 $ tar -tf filename.tar 环境变量 ~/.bashrc 配置完后，需要关闭当前控制台，以后打开的新控制台，配置就会起作用。 /etc/profile 修改完文件后，运行source /etc/profile方可生效。 显示环境变量 所有环境变量$ env 指定环境变量$ echo $HOSTNAME 设置环境变量 $ export PYTHONPATH=$PYTHONPATH:`pwd` 移除环境变量 $ unset PYTHONPATH 程序 命令command 执行Shell程序 执行当前目录下的命令$ ./command 执行PATH中路径下的命令$ command 后台执行$ nohup command & 服务service 启动服务 $ service ssh start 查看服务状态 $ service ssh status 停止服务 $ service ssh stop 重启服务 $ service ssh restart 设置开机自启动 $ update-rc.d ssh enable 设置开机不自启动 $ update-rc.d ssh disable 网络 下载 wget 下载文件$ wget http://www.163.com/index.html 下载文件指定保存文件名$ wget http://www.163.com/index.html -O index.html 下载文件内容输出到标准窗口$ wget http://www.163.com/index.html -O - curl 下载文件内容输出到标准窗口$ curl http://www.163.com/index.html 下载文件$ curl http://www.163.com/index.html -O 下载文件指定保存文件名$ curl http://www.163.com/index.html -o index.html 远程控制 连接 $ ssh username@ip $ ssh username@ip -p 22 复制 拷贝远程文件到本地$ scp lnsoft@172.16.33.32:/etc/vimrc ./ 拷贝本地文件到远程$ scp /etc/vimrc lnsoft@172.16.33.32:/etc/ 断开 closing the shell session, e.g. with exit followed by Enter, or Ctrl-d usually allows you to exit the ssh session normally. in the case where you have a bad connection and the shell is unresponsive, hit the Enter key, then type ~. and ssh should immediately close and return you to your command prompt. By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_linux/intranet-installation-deep-learning-environment.html":{"url":"chapter_linux/intranet-installation-deep-learning-environment.html","title":"内网安装深度学习环境","keywords":"","body":"内网安装深度学习环境 安装操作系统 下载Ubuntu 18.04 安装Ubuntu 18.04 安装ssh 下载ssh $ apt-get download openssh-client $ apt-get download openssh-server $ apt-get download openssh-sftp-server 安装ssh $ dpkg -i *.deb 安装gcc 查看gcc的依赖 $ apt-get install -s gcc Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: binutils binutils-common binutils-x86-64-linux-gnu cpp cpp-7 gcc-7 gcc-7-base libasan4 libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libgcc-7-dev libgomp1 libisl19 libitm1 liblsan0 libmpc3 libmpfr6 libmpx2 libquadmath0 libtsan0 libubsan0 linux-libc-dev manpages manpages-dev Suggested packages: binutils-doc cpp-doc gcc-7-locales gcc-multilib make autoconf automake libtool flex bison gdb gcc-doc gcc-7-multilib gcc-7-doc libgcc1-dbg libgomp1-dbg libitm1-dbg libatomic1-dbg libasan4-dbg liblsan0-dbg libtsan0-dbg libubsan0-dbg libcilkrts5-dbg libmpx2-dbg libquadmath0-dbg glibc-doc man-browser The following NEW packages will be installed: binutils binutils-common binutils-x86-64-linux-gnu cpp cpp-7 gcc gcc-7 gcc-7-base libasan4 libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libgcc-7-dev libgomp1 libisl19 libitm1 liblsan0 libmpc3 libmpfr6 libmpx2 libquadmath0 libtsan0 libubsan0 linux-libc-dev manpages manpages-dev 0 upgraded, 29 newly installed, 0 to remove and 10 not upgraded. Inst manpages (4.15-1 Ubuntu:18.04/bionic [all]) Inst binutils-common (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libbinutils (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst binutils-x86-64-linux-gnu (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst binutils (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst gcc-7-base (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libisl19 (0.19-1 Ubuntu:18.04/bionic [amd64]) Inst libmpfr6 (4.0.1-1 Ubuntu:18.04/bionic [amd64]) Inst libmpc3 (1.1.0-1 Ubuntu:18.04/bionic [amd64]) Inst cpp-7 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst cpp (4:7.3.0-3ubuntu2.1 Ubuntu:18.04/bionic-updates [amd64]) Inst libcc1-0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libgomp1 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libitm1 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libatomic1 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libasan4 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst liblsan0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libtsan0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libubsan0 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libcilkrts5 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libmpx2 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libquadmath0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst libgcc-7-dev (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst gcc-7 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Inst gcc (4:7.3.0-3ubuntu2.1 Ubuntu:18.04/bionic-updates [amd64]) Inst libc-dev-bin (2.27-3ubuntu1 Ubuntu:18.04/bionic [amd64]) Inst linux-libc-dev (4.15.0-46.49 Ubuntu:18.04/bionic-updates, Ubuntu:18.04/bionic-security [amd64]) Inst libc6-dev (2.27-3ubuntu1 Ubuntu:18.04/bionic [amd64]) Inst manpages-dev (4.15-1 Ubuntu:18.04/bionic [all]) Conf manpages (4.15-1 Ubuntu:18.04/bionic [all]) Conf binutils-common (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libbinutils (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf binutils-x86-64-linux-gnu (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf binutils (2.30-21ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf gcc-7-base (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libisl19 (0.19-1 Ubuntu:18.04/bionic [amd64]) Conf libmpfr6 (4.0.1-1 Ubuntu:18.04/bionic [amd64]) Conf libmpc3 (1.1.0-1 Ubuntu:18.04/bionic [amd64]) Conf cpp-7 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf cpp (4:7.3.0-3ubuntu2.1 Ubuntu:18.04/bionic-updates [amd64]) Conf libcc1-0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libgomp1 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libitm1 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libatomic1 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libasan4 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf liblsan0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libtsan0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libubsan0 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libcilkrts5 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libmpx2 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libquadmath0 (8.2.0-1ubuntu2~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf libgcc-7-dev (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf gcc-7 (7.3.0-27ubuntu1~18.04 Ubuntu:18.04/bionic-updates [amd64]) Conf gcc (4:7.3.0-3ubuntu2.1 Ubuntu:18.04/bionic-updates [amd64]) Conf libc-dev-bin (2.27-3ubuntu1 Ubuntu:18.04/bionic [amd64]) Conf linux-libc-dev (4.15.0-46.49 Ubuntu:18.04/bionic-updates, Ubuntu:18.04/bionic-security [amd64]) Conf libc6-dev (2.27-3ubuntu1 Ubuntu:18.04/bionic [amd64]) Conf manpages-dev (4.15-1 Ubuntu:18.04/bionic [all]) 下载gcc及依赖包 $ apt-get download binutils binutils-common binutils-x86-64-linux-gnu cpp cpp-7 gcc-7 gcc-7-base libasan4 libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libgcc-7-dev libgomp1 libisl19 libitm1 liblsan0 libmpc3 libmpfr6 libmpx2 libquadmath0 libtsan0 libubsan0 linux-libc-dev manpages manpages-dev gcc 安装gcc $ dpkg -i *.deb 安装make 下载make apt-get download make 安装make dpkg -i *.deb 安装Nvidia GPU驱动 禁⽤nouveau驱动 编辑配置文件 $ nano /etc/modprobe.d/blacklist-nouveau.conf blacklist nouveau options nouveau modeset=0 让配置内容生效 $ sudo update-initramfs -u 重启计算机 $ reboot 验证禁用nouveau驱动是否成功 查看没有任何信息，代表禁⽤成功 $ lsmod | grep nouveau 下载Nvidia GPU驱动 $ wget https://cn.download.nvidia.cn/XFree86/Linux-x86_64/418.56/NVIDIA-Linux-x86_64-418.56.run 安装Nvidia GPU驱动 $ sh NVIDIA-Linux-x86_64-418.56.run 安装Docker-CE 下载安装包 $ wget https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/containerd.io_1.2.2-3_amd64.deb $ wget https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce-cli_18.09.2~3-0~ubuntu-bionic_amd64.deb $ wget https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce_18.09.2~3-0~ubuntu-bionic_amd64.deb 安装Docker-CE dpkg -i *.deb 安装nvidia-docker2 nvidia-docker2 $ apt-get download nvidia-container-runtime nvidia-docker2 安装nvidia-docker2 $ dpkg -i *.deb 重新启动Docker daemon $ systemctl restart docker 验证容器内使用GPU 摘取镜像 $ docker pull nvidia/cuda:9.0-base 镜像保存为tar包 $ docker save -o cuda9.0-base.tar nvidia/cuda:9.0-base 导入镜像到内网机 $ docker load -i cuda9.0-base.tar 运行容器查看GPU信息 $ docker run --runtime=nvidia --rm nvidia/cuda:9.0-base nvidia-smi By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_docker/basic-knowledge.html":{"url":"chapter_docker/basic-knowledge.html","title":"基础知识","keywords":"","body":"Docker 基础知识 列出镜像列表 $ sudo docker images 删除镜像 删除 $ sudo docker rmi busybox:latest 强制删除 $ sudo docker rmi -f busybox:latest 删除所有的名字为的镜像 $ sudo docker rmi $(sudo docker images -f dangling=true -q) 运行容器 命令行交互运行 $ sudo docker run -it busybox:latest 后台运行 $ sudo docker run -d busybox:latest 分配指定的显卡给容器 $ sudo docker run --runtime=nvidia -d -e NVIDIA_VISIBLE_DEVICES=1 tensorflow/tensorflow:latest-gpu-py3 进入当前运行中的容器 $ sudo docker exec -it darknet bash # 按Ctrl+P,Ctrl+Q退出容器，不停止容器运行。 删除容器 $ docker rm -v test 导出镜像 $ docker save -o busybox.tar busybox:latest 导入镜像 $ docker load -i busybox.tar By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_docker/dockerfile.html":{"url":"chapter_docker/dockerfile.html","title":"Dockerfile","keywords":"","body":"Dockerfile .dockerignore file 当你项目中的文件或者目录不想加入到构建的镜像中，可以配置到.dockerignore文件中。 这有一个例子： .git .dockerignore Dockerfile .DS_Store .gitignore README.md object_detection.proto __pycache__ model test-images tmp 你需要掌握的知识 Dockerfile reference 最佳实践 这里以darknet-serving为例子 FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04 LABEL maintainer=\"wang-junjian@qq.com\" RUN apt-get update && apt-get install -y \\ python3 \\ python3-pip \\ nano \\ && rm -rf /var/lib/apt/lists/* ADD requirements.txt /darknet-serving/ WORKDIR /darknet-serving RUN pip3 install --no-cache-dir -r requirements.txt ADD . /darknet-serving/ ENTRYPOINT [\"python3\", \"darknet_model_server.py\"] By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "},"chapter_docker/experience.html":{"url":"chapter_docker/experience.html","title":"实践经验","keywords":"","body":"实践经验 精简镜像大小 由于Docker容器的文件系统采用了写入时拷贝技术，这项技术的作用是加快容器的启动时间，跟一般的虚拟机相比，容器的启动速度确实非常快。虽然该技术在很大程度上提升了docker容器的运行效率，但是也会增加磁盘读写方面的开销。 同时也为了避免大量时间都花费在等待镜像的来回传送上，精简镜像大小是非常有必要的。 减少镜像Layer层数 每次在Dockerfile中执行RUN命令的时候系统都会在镜像中新建一个层，每个镜像层都会占用一定的磁盘空间，因此为了尽量减少镜像的层数，最好把解压、删除等所有文件操作都写在同一行RUN命令下。 迁移数据 不要把训练数据等直接COPY到镜像中，由于数据往往过于庞大，不仅占用存储空间，致使性能下降，更会导致敏感数据泄露。可以利用分布式文件系统、数据库等存储数据。一般在部署应用的时候进行挂载，从而使用数据。 有效删除不必要文件 在下载压缩包或者其他归档文件的时候，可以将其解压，以及立即删除归档文件。但前提是这几个操作还是要在同一个RUN命令下。 RUN yum -y update && \\ yum install -y libstdc++.so.6 mariadb && \\ yum clean all && \\ rm -rf /tmp/* /var/tmp/* /data/tmp/* RUN apt-get update && apt-get install -y \\ python3 \\ python3-pip \\ nano \\ && rm -rf /var/lib/apt/lists/* latest 不要误以为latest版本镜像是最新与最稳定的版本镜像，这可能是个惯例，但并不是出于任何严格的规定。与所有其他版本镜像一样，当有新的版本push到镜像仓库中，latest标签的镜像也不会自动更新。 By 狗吃草，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-07-30 17:27:31 "}}